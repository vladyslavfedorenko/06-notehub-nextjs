import axios from "axios";
import { Note } from "@/types/note";

const token = process.env.NEXT_PUBLIC_NOTEHUB_TOKEN;
const baseURL = process.env.NEXT_PUBLIC_API_URL;

if (!token) {
  console.warn("‚ö†Ô∏è NEXT_PUBLIC_NOTEHUB_TOKEN is missing!");
}

export const instance = axios.create({
  baseURL,
  headers: {
    Authorization: `Bearer ${token}`,
  },
});

export interface NotesResponse {
  notes: Note[];
  totalPages: number;
}

// üì• –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –Ω–æ—Ç–∞—Ç–æ–∫
export const getNotes = async (
  search: string,
  page: number
): Promise<NotesResponse> => {
  const { data } = await instance.get<NotesResponse>("/notes", {
    params: { search, page },
  });
  return data;
};

// ‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –Ω–æ—Ç–∞—Ç–∫—É
export const createNote = async (
  note: Pick<Note, "title" | "content" | "tag">
): Promise<Note> => {
  const { data } = await instance.post<Note>("/notes", note);
  return data;
};

// ‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É
export const deleteNote = async (id: string): Promise<Note> => {
  const { data } = await instance.delete<Note>(`/notes/${id}`);
  return data;
};

// üîç –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É –∑–∞ ID
export const getNoteById = async (id: string): Promise<Note> => {
  const { data } = await instance.get<Note>(`/notes/${id}`);
  return data;
};
