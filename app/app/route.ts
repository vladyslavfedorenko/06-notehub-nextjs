import { NextResponse } from "next/server";

// –ü—Ä–∏–º–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∑–∞–º–µ—Ç–∫–∏)
const notes = [
  {
    id: 1,
    title: "–ü–µ—Ä–≤–∞—è –∑–∞–º–µ—Ç–∫–∞",
    content: "–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∞ API.",
    tag: "demo",
  },
  {
    id: 2,
    title: "–í—Ç–æ—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞",
    content: "API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ üöÄ",
    tag: "test",
  },
];

// üìò –û–±—Ä–∞–±–æ—Ç–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–æ–≤ (—Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫)
export async function GET() {
  return NextResponse.json({ notes });
}

// üìò –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏)
export async function POST(req: Request) {
  try {
    const body = await req.json();
    const newNote = {
      id: notes.length + 1,
      title: body.title ?? "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
      content: body.content ?? "",
      tag: body.tag ?? "general",
    };
    notes.push(newNote);

    return NextResponse.json({ note: newNote, success: true }, { status: 201 });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏:", error);
    return NextResponse.json(
      { error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏" },
      { status: 400 }
    );
  }
}
